#apiVersion: v1
#kind: Namespace
#metadata:
#  name: ingress-nginx
#  labels:
#    app.kubernetes.io/name: ingress-nginx
#    app.kubernetes.io/instance: ingress-nginx
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-nginx
  namespace: test
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-nginx
  namespace: test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: ingress-nginx
    namespace: test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tls-ingress
  labels:
    k8s-app: tls-ingress
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: tls-ingress
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        k8s-app: tls-ingress
    spec:
      terminationGracePeriodSeconds: 60
      serviceAccountName: ingress-nginx
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
        - image:  registry.cn-hangzhou.aliyuncs.com/launcher/nginx-ingress-controller:0.20.0
          imagePullPolicy: IfNotPresent
          name: nginx
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          ports:
            - containerPort: 80
              protocol: TCP
            - containerPort: 443
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - /nginx-ingress-controller
            - --ingress-class=istio
#            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
#            - --default-ssl-certificate=ingress-nginx/gateway-certs
#      nodeSelector:
#        node-role.kubernetes.io/master: ""
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: tls-ingress
  name: tls-ingress
  namespace: test
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
      name: p1
    - port: 443
      protocol: TCP
      targetPort: 443
      name: p2
  type: NodePort
  selector:
    k8s-app: tls-ingress
#---
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: web-test2
#  namespace: test
#  annotations:
#    kubernetes.io/ingress.class: "istio"
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # http-->https
##    nginx.ingress.kubernetes.io/affinity: cookie
##    nginx.ingress.kubernetes.io/session-cookie-hash: sha1
##    nginx.ingress.kubernetes.io/session-cookie-name: route
##    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
##    nginx.ingress.kubernetes.io/auth-tls-secret: "sockjs-tls-secret"
#spec:
#  rules:
#    - host: www.cai.com1
#      http:     # 直接通过ingress controller 的ip访问
#        paths:
#          - path: /
#            backend:
#              serviceName: web-svc
#              servicePort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: canary
  annotations:
    kubernetes.io/ingress.class: "istio"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # http-->https
spec:
  rules:
    - host:
      http:
        paths:
          - path: /
            backend:
              serviceName: compent-canary-v1
              servicePort: 80
